***Project 1***

**20 points**

Write a sender program and a receiver program, where the sender accepts a file as a command line parameter (any file on your hard disk), breaks it into smaller chunks (assume at least 12 chunks for your file), and sends it to the receiver. The receiver will concatenate the pieces it receives and will store it to a file on its end. Note that you would have at least 12 datagrams sent by the sender to the receiver. The sender and receiver will write out a detailed log of what they are doing to the console.
For instance, for each datagram sent the sender will write the [packet#]-[start byte offset]-[end byte offset]-[text sent].
Likewise, for each datagram received, the receiver will write the [packet#]-[start byte offset]-[end byte offset]-[text received].
Upload the completed Java code to your dropbox.

**Sender.java:** Seong-Chan Kang

**Reciever.java:** Tony Peraza

***Project 2***

**80 points**

[]	You will ensure reliable transport by having the Receiver acknowledge packets received from the Sender; the Sender will detect missing acknowledgements and resend the dropped or corrupted datagrams after a timeout period. The default timeout period is 2000ms, but you may change this with the -t command-line option. 

[]	The Receiver will only use positive ACKs for any datagrams that it receives. 

[]	Acknowledgement datagrams do not need to be acknowledged by the Sender.

[]	Your Receiver should ensure that data are written in the correct order. 

[]	Provide trivial flow control – based on the send window. You should support arbitrary window sizes. Allow multiple packets to be outstanding at any time. The window size is supplied by the -w command-line option. Optionally, you may choose to set this window size to 1.

[]	File data will be text. 

[]	Because we are doing this between two processes on a single machine, latency is near 0, and no network faults can occur. As a result, you should introduce errors to test the correctness of your implementation. The Sender and Receiver programs must both accept options to force packets to be lost or corrupted at both processes. 

[]	User Interface 
Design a simple UI (command line, or optionally GUI). 
(java edu.metrostate.Sender -s 100 -t 30000 -w 4 -d 0.25 receiver_ip_addr receiver_port
 java edu.metrostate.Receiver -w 4 -d 0.5 receiver_ip_addr receiver_port)
The user may specify: 
	####	For the Sender:
	[] Size of packet using the -s command line argument 
	[] Timeout interval using the -t command line argument 
	[] The IP address and port at which the receiver is listening
	[] For the Receiver
	[] The IP address and port at which the Receiver should listen
	####	For the Sender and Receiver:
	[] sliding window size, using the -w command line argument 
 	[] percentage of datagrams to corrupt, delay, or drop using the -d argument
	[] You will start your Sender and Receiver in two separate JVMs.
	* Both programs should run outside of your IDE - do not launch them from Eclipse
	* Both windows should be open side by side, so you can watch the output from each 
	* Windows should have reasonable contrast and font size so text is easily readable 
(use black text on a white background, and a medium to large font)

[]	Your programs should present enough information to demonstrate the protocol in action. This is important – I will not take your word for what is happening unless there is independent corroboration via stdout messaging.

#### The information provided in the sender’s window should include (in fixed width columns):****
####	For each datagram attempted to be sent:	
Static text: 
 		[]	If first time datagram is being sent: [SENDing]: 
		[]	If resending a datagram: [ReSend.]:
		[]	sequence number of datagram (integer, [0,(size of file)/(size of packet)]
		[]	byte sequence carried in datagram: [<start byte offset>:<end byte offset>]
		[]	datagram sent time in milliseconds
		[]	datagram condition depending on random error [SENT|DROP|ERRR]
		[]	For each ACK received
		[]	Static text [AckRcvd]: 
		[]	Sequence number of datagram that was ACKed
Static text:
		[]	if duplicate ACK received: [DuplAck]
		[]	if corrupted ACK is received: [ErrAck.]
		[]	if ACK will move window: [MoveWnd]
For each timeout event
	[]	Static text [TimeOut]: 
	[]	Sequence number of datagram that timed out
	
####The information provided in the receiver’s window should include (fixed width output), for each datagram received:
Static text
	[]	if first time datagram is being received: [RECV]
	[]	if duplicate datagram received: [DUPL]
	[]	datagram received time in milliseconds
	[]	Sequence number of the received data datagram
	[]	Condition of data Datagram
	[]	if datagram is corrupt: [CRPT]
	[]	if datagram is received out of sequence: [!Seq]
	[]	if datagram is good: [RECV]
	[]	For each ACK datagram, decision for the ACK: [DROP|SENT|ERR]
		Use the same rules as the Sender.
